using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BD2.Analizadores
{
    public class ParserConstants : ScannerConstants
    {
        public static int START_SYMBOL = 50;

        public static int FIRST_NON_TERMINAL = 50;
        public static int FIRST_SEMANTIC_ACTION = 93;

        public int[,] PARSER_TABLE =
        {
        { -1, -1, -1, -1,  0, -1, -1, -1, -1,  0, -1, -1,  0, -1, -1, -1, -1,  0,  0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        {  2, -1, -1, -1,  1, -1, -1, -1, -1,  1, -1, -1,  1, -1, -1, -1, -1,  1,  1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1,  3, -1, -1, -1, -1,  4, -1, -1,  5, -1, -1, -1, -1,  6,  7,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 10, 11, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15 },
        { -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, 21 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 23, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, 27 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1 },
        { -1, -1, 31, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 32, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, 36 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, 42, -1, -1, -1 },
        { -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1 },
        { -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, 45, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, 45, -1, -1, -1 },
        { -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, 48, 48, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, 48, -1, -1, -1 },
        { -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 51, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, 57, 58, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1 },
        { -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 62, 63, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 65, -1, -1, -1, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, 68, 69, 70, 71, 72, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 76, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
    };

        public int[][] PRODUCTIONS =
        {
        new int[] {  52,  93,  46,  51 },
        new int[] {  50 },
        new int[] {   0 },
        new int[] {  53 },
        new int[] {  64 },
        new int[] {  69 },
        new int[] {  89 },
        new int[] {  91 },
        new int[] {  92 },
        new int[] {   5,  54 },
        new int[] {   6,   2,  94 },
        new int[] {   7,   2,  95,  48,  58,  99,  55,  57,  49 },
        new int[] {   8,   2,  96,   9,   2,  97,  48,  62,  49 },
        new int[] {  25,  27,  48,  62,  49,  99 },
        new int[] {   0 },
        new int[] {   0 },
        new int[] {  56 },
        new int[] {  26,  27,  48,   2, 100,  49,  28,   2, 101,  48,   2, 102,  49,  57 },
        new int[] {  59,  60 },
        new int[] {   2,  98,  61 },
        new int[] {  44,  58 },
        new int[] {   0 },
        new int[] {  33, 103 },
        new int[] {  34,  48,   3, 104,  49 },
        new int[] {  35,  48,   3, 105,  49 },
        new int[] {   2,  98,  63 },
        new int[] {  44,   2,  98,  63 },
        new int[] {   0 },
        new int[] {  10,  11,   2,  98,  65, 112,  12,  48,  66,  49 },
        new int[] {  48,  62,  49 },
        new int[] {   0 },
        new int[] {  67, 113,  68 },
        new int[] {   3 },
        new int[] {   4 },
        new int[] {  36 },
        new int[] {  44,  66 },
        new int[] {   0 },
        new int[] {  13,  70,  14,  76,  82,  79,  80 },
        new int[] {   2,  98,  43,  72 },
        new int[] {   2, 114,  74,  71 },
        new int[] {  45, 116 },
        new int[] {  44,  73,  71 },
        new int[] {   0 },
        new int[] {   2,  98,  43,   2, 114,  74 },
        new int[] {  24,  47,   2, 115,  47 },
        new int[] {   0 },
        new int[] {  78,  77 },
        new int[] {  44,  76 },
        new int[] {   0 },
        new int[] {   2, 117 },
        new int[] {  15,  83 },
        new int[] {   0 },
        new int[] {  21,  22,  73,  71, 121,  81, 122 },
        new int[] {   0 },
        new int[] {  23 },
        new int[] {   0 },
        new int[] {   0 },
        new int[] {  30,  29,   2, 118 },
        new int[] {  31,  29,   2, 119 },
        new int[] {  32,  29,   2, 120 },
        new int[] {  84,  86 },
        new int[] {  75,  87, 111,  85 },
        new int[] {  75 },
        new int[] {  67 },
        new int[] {   2,  98,  43,   2, 114 },
        new int[] {  88, 110,  83 },
        new int[] {   0 },
        new int[] {  37 },
        new int[] {  38 },
        new int[] {  39 },
        new int[] {  40 },
        new int[] {  41 },
        new int[] {  42 },
        new int[] {  16 },
        new int[] {  17 },
        new int[] {  18,  90 },
        new int[] {   7,   2, 106 },
        new int[] {   8,   2, 107 },
        new int[] {  19,   2, 108 },
        new int[] {  20,   6,   2, 109 }
    };

        public String[] PARSER_ERROR =
        {
        "",
        "Era esperado fim de programa",
        "Era esperado id",
        "Era esperado numero",
        "Era esperado literal",
        "Era esperado CREATE",
        "Era esperado DATABASE",
        "Era esperado TABLE",
        "Era esperado INDEX",
        "Era esperado ON",
        "Era esperado INSERT",
        "Era esperado INTO",
        "Era esperado VALUES",
        "Era esperado SELECT",
        "Era esperado FROM",
        "Era esperado WHERE",
        "Era esperado AND",
        "Era esperado OR",
        "Era esperado DROP",
        "Era esperado DESCRIBE",
        "Era esperado SET",
        "Era esperado ORDER",
        "Era esperado BY",
        "Era esperado DESC",
        "Era esperado AS",
        "Era esperado PRIMARY",
        "Era esperado FOREIGN",
        "Era esperado KEY",
        "Era esperado REFERENCES",
        "Era esperado JOIN",
        "Era esperado INNER",
        "Era esperado LEFT",
        "Era esperado RIGHT",
        "Era esperado integer",
        "Era esperado varchar",
        "Era esperado char",
        "Era esperado null",
        "Era esperado \"=\"",
        "Era esperado \">\"",
        "Era esperado \"<\"",
        "Era esperado \">=\"",
        "Era esperado \"<=\"",
        "Era esperado \"<>\"",
        "Era esperado \".\"",
        "Era esperado \",\"",
        "Era esperado \"*\"",
        "Era esperado \";\"",
        "Era esperado \"`\"",
        "Era esperado \"(\"",
        "Era esperado \")\"",
        "Comando inválido", //"<COMANDO> inválido",
        "Comando inválido", //"<RCOMANDO> inválido",
        "Comando inválido", //"<ACAO> inválido",
        "Comando inválido", //"<CRIAR> inválido",
        "Comando inválido", //"<CRIAR2> inválido",
        "Comando inválido", //"<PRIMERY> inválido",
        "Comando inválido", //"<FOREIGN> inválido",
        "Comando inválido", //"<TEMFOREIGN> inválido",
        "Comando inválido", //"<ATRIBUTOS> inválido",
        "Comando inválido", //"<ATRIBUTO> inválido",
        "Comando inválido", //"<RATRIBUTOS> inválido",
        "Comando inválido", //"<TIPO> inválido",
        "Comando inválido", //"<LISTAIDS> inválido",
        "Comando inválido", //"<RLISTAIDS> inválido",
        "Comando inválido", //"<INCLUIR> inválido",
        "Comando inválido", //"<COLUNAS> inválido",
        "Comando inválido", //"<LISTAVALORES> inválido",
        "Comando inválido", //"<VALOR> inválido",
        "Comando inválido", //"<RLISTAVALORES> inválido",
        "Comando inválido", //"<SELECIONAR> inválido",
        "Comando inválido", //"<CAMPOS> inválido",
        "Comando inválido", //"<RCAMPOS> inválido",
        "Comando inválido", //"<CAMPOS2> inválido",
        "Comando inválido", //"<CAMPO> inválido",
        "Comando inválido", //"<AS> inválido",
        "Comando inválido", //"<CAMPO2> inválido",
        "Comando inválido", //"<TABELAS> inválido",
        "Comando inválido", //"<RTABELAS> inválido",
        "Comando inválido", //"<TABELA> inválido",
        "Comando inválido", //"<CLAUSULA_WHERE> inválido",
        "Comando inválido", //"<CLAUSUALA_ORDER> inválido",
        "Comando inválido", //"<DESC> inválido",
        "Comando inválido", //"<CLAUSULA_JOIN> inválido",
        "Comando inválido", //"<CONDICOES> inválido",
        "Comando inválido", //"<CONDICAO> inválido",
        "Comando inválido", //"<CONDICAO2> inválido",
        "Comando inválido", //"<RCONDICAO> inválido",
        "Comando inválido", //"<OPERADOR_REL> inválido",
        "Comando inválido", //"<OPERADOR_LOG> inválido",
        "Comando inválido", //"<EXCLUIR> inválido",
        "Comando inválido", //"<EXCLUIR2> inválido",
        "Comando inválido", //"<DESCREVER> inválido",
        "Comando inválido", //"<SETAR_BANCO> inválido"
    };
    }
}
